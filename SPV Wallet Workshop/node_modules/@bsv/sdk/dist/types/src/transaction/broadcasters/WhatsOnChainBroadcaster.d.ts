import { BroadcastResponse, BroadcastFailure, Broadcaster } from '../Broadcaster.js';
import Transaction from '../Transaction.js';
import { HttpClient } from "../http/HttpClient.js";
/**
 * Represents an WhatsOnChain transaction broadcaster.
 */
export default class WhatsOnChainBroadcaster implements Broadcaster {
    readonly network: string;
    private readonly URL;
    private readonly httpClient;
    /**
     * Constructs an instance of the WhatsOnChain broadcaster.
     *
     * @param {'main' | 'test' | 'stn'} network - The BSV network to use when calling the WhatsOnChain API.
     * @param {HttpClient} httpClient - The HTTP client used to make requests to the API.
     */
    constructor(network?: 'main' | 'test' | 'stn', httpClient?: HttpClient);
    /**
     * Broadcasts a transaction via WhatsOnChain.
     *
     * @param {Transaction} tx - The transaction to be broadcasted.
     * @returns {Promise<BroadcastResponse | BroadcastFailure>} A promise that resolves to either a success or failure response.
     */
    broadcast(tx: Transaction): Promise<BroadcastResponse | BroadcastFailure>;
}
//# sourceMappingURL=WhatsOnChainBroadcaster.d.ts.map