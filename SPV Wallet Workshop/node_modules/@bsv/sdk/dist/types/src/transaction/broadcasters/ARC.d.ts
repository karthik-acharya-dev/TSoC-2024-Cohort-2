import { BroadcastResponse, BroadcastFailure, Broadcaster } from '../Broadcaster.js';
import Transaction from '../Transaction.js';
import { HttpClient } from "../http/HttpClient.js";
/** Configuration options for the ARC broadcaster. */
export interface ArcConfig {
    /** Authentication token for the ARC API */
    apiKey?: string;
    /** The HTTP client used to make requests to the ARC API. */
    httpClient?: HttpClient;
    /** Deployment id used annotating api calls in XDeployment-ID header - this value will be randomly generated if not set */
    deploymentId?: string;
    /** notification callback endpoint for proofs and double spend notification */
    callbackUrl?: string;
    /** default access token for notification callback endpoint. It will be used as a Authorization header for the http callback */
    callbackToken?: string;
    /** additional headers to be attached to all tx submissions. */
    headers?: Record<string, string>;
}
/**
 * Represents an ARC transaction broadcaster.
 */
export default class ARC implements Broadcaster {
    readonly URL: string;
    readonly apiKey: string | undefined;
    readonly deploymentId: string;
    readonly callbackUrl: string | undefined;
    readonly callbackToken: string | undefined;
    readonly headers: Record<string, string> | undefined;
    private readonly httpClient;
    /**
     * Constructs an instance of the ARC broadcaster.
     *
     * @param {string} URL - The URL endpoint for the ARC API.
     * @param {ArcConfig} config - Configuration options for the ARC broadcaster.
     */
    constructor(URL: string, config?: ArcConfig);
    /**
     * Constructs an instance of the ARC broadcaster.
     *
     * @param {string} URL - The URL endpoint for the ARC API.
     * @param {string} apiKey - The API key used for authorization with the ARC API.
     */
    constructor(URL: string, apiKey?: string);
    /**
     * Broadcasts a transaction via ARC.
     *
     * @param {Transaction} tx - The transaction to be broadcasted.
     * @returns {Promise<BroadcastResponse | BroadcastFailure>} A promise that resolves to either a success or failure response.
     */
    broadcast(tx: Transaction): Promise<BroadcastResponse | BroadcastFailure>;
    private requestHeaders;
}
//# sourceMappingURL=ARC.d.ts.map